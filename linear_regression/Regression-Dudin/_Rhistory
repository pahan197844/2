1/2^3
5/13=4/52
5/13 == 4/52
3/13+1/2
(1/6)
10/24
4/24
(1/3)-(1/24)
7/24
5/7-1/3
2^10
0.75^10
0.25^10
1/8^3
1/2^3
5/13 == 4/52
3/13+1/2
(1/6)
10/24
4/24
(1/3)-(1/24)
7/24
5/7-1/3
2^10
0.75^10
0.25^10
1/8^3
1/2^3
5/13 == 4/52
3/13+1/2
x(6,2,3,1)
sd(x)
x(6,2,3,1)
sd(x)
srt x
x(6,2,3,1)
sd(x)
srt (x)
x
sd(6,2,3,1)
sd(6,2,3,1, na.rm=FALSE)
mean (6,2,3,1, na.rm=FALSE)
mean (6,2,3,1)
median (6,2,3,1)
sd ( 6,5,13,8)
mean ( 6,5,13,8)
((6-s)^2+(5-s)^2+(13-s)^2+(8-s)^2)/4
s <- mean ( 6,5,13,8)
((6-s)^2+(5-s)^2+(13-s)^2+(8-s)^2)/4
> sd
function (x, na.rm = FALSE)
{
if (is.matrix(x))
apply(x, 2, sd, na.rm = na.rm)
else if (is.vector(x))
sqrt(var(x, na.rm = na.rm))
else if (is.data.frame(x))
sapply(x, sd, na.rm = na.rm)
else sqrt(var(as.vector(x), na.rm = na.rm))
}
d <- c(2,4,4,4,5,5,7,9)
sd(d)
d <- c(6,5,13,8)
sd(d)
mean (6,5,13,8)
mediane (6,5,13,8)
median.default(6,5,13,8)
mean(6,5,13,8)
mean(6,5,13,8, trim=0,
na.rm=FALSE))
mean(6,5,13,8, trim=0,na.rm=FALSE))
mean(6,5,13,8, trim=0,na.rm=FALSE)
x <- mean(6,5,13,8, trim=0,na.rm=FALSE)
SD (x)
x <- mean(6,5,13,8, trim=0,na.rm=FALSE)
sd (x)
x <- mean(6,5,13,8)
sd (x)
x <- mean(6,5,13,8)
sd (x)
sd x
sd
install.packages(‘gdata’,dependencies = TRUE)
install.packages("gdata",dependencies = TRUE)
library(gdata)
install.packages("e1071",dependencies = TRUE)
library(e1071)
?function
x <- c(3,3,3,3,3,100)
sd (x)
median (x)
#2 Importing 5000 records from 100 000
inputData <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
incompleteID <- headerData [-5,],[-11]
str (incompleteID)
str (headerData)
setwd("~/dataset_diabetes")
#2 Importing 5000 records from 100 000
inputData <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
incompleteID <- headerData [-5,],[-11]
str (incompleteID)
str (headerData)
#2 Importing 5000 records from 100 000
inputData <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
incompleteID <- headerData [-5,],[-11]
str (imputData)
incompleteID <- headerData [-5,],[-11]
str (headerData)
#2 Importing 5000 records from 100 000
diabet5000 <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
incompleteID <- headerData [-5,],[-11]
str (diabet5000)
summary(diabet5000)
View(diabet5000)
readmit <- ln( readmission ~ num_lab_procedures+num_procedures
+num_medications
time_in_hospital
, diabet5000)
summary(readmit)
readmit <- ln( readmission ~ num_lab_procedures+num_procedures+num_medications+time_in_hospital, diabet5000)
summary(readmit)
readmit = ln( readmission ~ num_lab_procedures+num_procedures+num_medications+time_in_hospital, diabet5000)
summary(readmit)
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
str (diabet5000)
summary(diabet5000)
readmit = ln( readmitted ~ num_lab_procedures+num_procedures+num_medications+time_in_hospital, diabet5000)
summary(readmit)
#2 Importing 5000 records from 100 000
diabet5000 <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
str (diabet5000)
summary(diabet5000)
readmit = lm( readmitted ~ num_lab_procedures+num_procedures+num_medications+time_in_hospital, diabet5000)
summary(readmit)
readmit = lm( readmitted ~ time_in_hospital, diabet5000)
summary(readmit)
readmit = lm( readmitted ~ time_in_hospital, data=diabet5000)
#2 Importing 5000 records from 100 000
diabet5000 <- read.csv("diabetis5000.csv")
#3 Loading ID into the ‘headerData’
headerData <- read.csv("IDs_mapping.csv")
#4 Storing incomplete rows
str (diabet5000)
summary(diabet5000)
readmit = lm( readmitted ~ time_in_hospital, data=diabet5000)
summary(readmit)
data= read.csv(wine)
data= read.csv(wine.csv)
data= read.csv("wine.csv")
data <- read.csv("wine.csv")
setwd("~/")
data <- read.csv("wine.csv")
summary(data)
predict= lm( Price ~ WinterRain+AGST+HarvestRain+Age+FrancePop+Year, data= data)
summary(predict)
data <- read.csv("wine.csv")
summary(data)
predict= lm( Price ~ WinterRain+AGST+HarvestRain+Age+FrancePop+Year, data= data)
summary(predict)
setwd("~/linear_regression/linear_regression")
tail(states.info, 8)
str (dataset)
list.files("dataSets")
dataset = read.rds("dataSets/states.rds")
dataset <- read.rds("dataSets/states.rds")
dataset <- read.rds ("dataSets/states.rds")
dataset <- readRDS("dataSets/states.rds")
str (dataset)
load("F:/Documents/linear_regression/linear_regression/.RData")
View(states.info)
View(states.data)
View(sts.ex.sat)
list.files("dataSets")
dataset <- readRDS("dataSets/states.rds")
str (dataset)
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
str (states.info)
View(dataset)
states.info <- data.frame(attributes(dataset)[c("metro", "var.labels")])
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
str (states.info)
View(states.info)
energy$metro <- (metro ~ energy, data = states.data)
energy$metro <- lm (metro ~ energy, data = states.data)
list.files("dataSets")
dataset <- readRDS("dataSets/states.rds")
str (dataset)
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energy$metro <- lm (metro ~ energy, data = states.data)
energy$metro <- lm (metro ~ energy, data = dataset)
?lm
summary(sts.met.ener)
summary (energy$metro)
energy$metro <- lm (metro ~ energy, data = dataset)
energy$metro <- lm ((metro) ~ (energy), data = dataset)
energy$metro <- lm (energy ~ metro, data = dataset)
dataset <- readRDS("dataSets/states.rds")
str (dataset)
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energy$metro <- lm (energy ~ metro, data = dataset)
summary (energy$metro)
energy$metro <- lm (energy ~ metro, data = dataset)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
plot(energymetro)
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (energymetro)
plot(energymetro)
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (energymetro)
plot(energymetro)
##   repeat steps 1-3. Is this model significantly better than the model
##   with /metro/ as the only predictor?
## Interactions and factors
## ââââââââââââââââââââââââââ
## Modeling interactions
summary (energymetro)
cor (energymetro)
cor (sts.met.ener)
plot(energymetro)
plot( energymetro1)
summary ( energymetro1)
energymetro1 <- lm (energy ~ metro + density + waste + toxic, data = dataset)
summary ( energymetro1)
plot( energymetro1)
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
data=dataset)
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
#  Introduction
## ââââââââââââââ
#   â¢ Learning objectives:
##     â¢ Learn the R formula interface
##     â¢ Specify factor contrasts to test specific hypotheses
##     â¢ Perform model comparisons
##     â¢ Run and interpret variety of regression models in R
## Set working directory
## âââââââââââââââââââââââââ
##   It is often helpful to start your R session by setting your working
##   directory so you don't have to type the full path names to your data
##   and other files
# set the working directory
# setwd("~/Desktop/Rstatistics")
# setwd("C:/Users/dataclass/Desktop/Rstatistics")
##   You might also start by listing the files in your working directory
getwd() # where am I?
list.files("dataSets") # files in the dataSets folder
## Load the states data
## ââââââââââââââââââââââââ
# read the states data
states.data <- readRDS("dataSets/states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
## Linear regression
## âââââââââââââââââââ
## Examine the data before fitting models
## ââââââââââââââââââââââââââââââââââââââââââ
##   Start by examining the data to check for problems.
# summary of expense and csat columns, all rows
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
# correlation between expense and csat
cor(sts.ex.sat)
## Plot the data before fitting models
## âââââââââââââââââââââââââââââââââââââââ
##   Plot the data to look for multivariate outliers, non-linear
##   relationships etc.
# scatter plot of expense vs csat
plot(sts.ex.sat)
## Linear regression example
## âââââââââââââââââââââââââââââ
##   â¢ Linear regression models can be fit with the `lm()' function
##   â¢ For example, we can use `lm' to predict SAT scores based on
##     per-pupal expenditures:
# Fit our regression model
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
# Summarize and print the results
summary(sat.mod) # show regression coefficients table
## Why is the association between expense and SAT scores /negative/?
## âââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââââ
##   Many people find it surprising that the per-capita expenditure on
##   students is negatively related to SAT scores. The beauty of multiple
##   regression is that we can try to pull these apart. What would the
##   association between expense and SAT scores be if there were no
##   difference among the states in the percentage of students taking the
##   SAT?
summary(lm(csat ~ expense + percent, data = states.data))
## The lm class and methods
## ââââââââââââââââââââââââââââ
##   OK, we fit our model. Now what?
##   â¢ Examine the model object:
class(sat.mod)
names(sat.mod)
methods(class = class(sat.mod))[1:9]
##   â¢ Use function methods to get more information about the fit
confint(sat.mod)
# hist(residuals(sat.mod))
## Linear Regression Assumptions
## âââââââââââââââââââââââââââââââââ
##   â¢ Ordinary least squares regression relies on several assumptions,
##     including that the residuals are normally distributed and
##     homoscedastic, the errors are independent and the relationships are
##     linear.
##   â¢ Investigate these assumptions visually by plotting your model:
par(mar = c(4, 4, 2, 2), mfrow = c(1, 2)) #optional
plot(sat.mod, which = c(1, 2)) # "which" argument optional
## Comparing models
## ââââââââââââââââââââ
##   Do congressional voting patterns predict SAT scores over and above
##   expense? Fit two models and compare them:
# fit another model, adding house and senate as predictors
sat.voting.mod <-  lm(csat ~ expense + house + senate,
data = na.omit(states.data))
sat.mod <- update(sat.mod, data=na.omit(states.data))
# compare using the anova() function
anova(sat.mod, sat.voting.mod)
coef(summary(sat.voting.mod))
## Exercise: least squares regression
## ââââââââââââââââââââââââââââââââââââââââ
##   Use the /states.rds/ data set. Fit a model predicting energy consumed
##   per capita (energy) from the percentage of residents living in
##   metropolitan areas (metro). Be sure to
##   1. Examine/plot the data before fitting the model
##   2. Print and interpret the model `summary'
##   3. `plot' the model to look for deviations from modeling assumptions
##   Select one or more additional predictors to add to your model and
##   repeat steps 1-3. Is this model significantly better than the model
##   with /metro/ as the only predictor?
## Interactions and factors
## ââââââââââââââââââââââââââ
## Modeling interactions
## âââââââââââââââââââââââââ
##   Interactions allow us assess the extent to which the association
##   between one predictor and the outcome depends on a second predictor.
##   For example: Does the association between expense and SAT scores
##   depend on the median income in the state?
#Add the interaction to the model
sat.expense.by.percent <- lm(csat ~ expense*income,
data=states.data)
#Show the results
coef(summary(sat.expense.by.percent)) # show regression coefficients table
## Regression with categorical predictors
## ââââââââââââââââââââââââââââââââââââââââââ
##   Let's try to predict SAT scores from region, a categorical variable.
##   Note that you must make sure R does not think your categorical
##   variable is numeric.
# make sure R knows region is categorical
str(states.data$region)
states.data$region <- factor(states.data$region)
#Add region to the model
sat.region <- lm(csat ~ region,
data=states.data)
#Show the results
coef(summary(sat.region)) # show regression coefficients table
anova(sat.region) # show ANOVA table
##   Again, *make sure to tell R which variables are categorical by
##   converting them to factors!*
## Setting factor reference groups and contrasts
## âââââââââââââââââââââââââââââââââââââââââââââââââ
##   In the previous example we use the default contrasts for region. The
##   default in R is treatment contrasts, with the first level as the
##   reference. We can change the reference group or use another coding
##   scheme using the `C' function.
# print default contrasts
contrasts(states.data$region)
# change the reference group
coef(summary(lm(csat ~ C(region, base=4),
data=states.data)))
# change the coding scheme
coef(summary(lm(csat ~ C(region, contr.helmert),
data=states.data)))
##   See also `?contrasts', `?contr.treatment', and `?relevel'.
## Exercise: interactions and factors
## ââââââââââââââââââââââââââââââââââââââââ
##   Use the states data set.
##   1. Add on to the regression equation that you created in exercise 1 by
##      generating an interaction term and testing the interaction.
##   2. Try adding region to the model. Are there significant differences
##      across the four regions?
list.files("dataSets")
dataset <- readRDS("dataSets/states.rds")
str (dataset)
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (sts.met.ener)
plot(energymetro)
plot( energymetro1)
states.data <- readRDS("dataSets/states.rds")
#get labels
states.info <- data.frame(attributes(states.data)[c("names", "var.labels")])
#look at last few labels
tail(states.info, 8)
## Linear regression
## âââââââââââââââââââ
## Examine the data before fitting models
## ââââââââââââââââââââââââââââââââââââââââââ
##   Start by examining the data to check for problems.
# summary of expense and csat columns, all rows
sts.ex.sat <- subset(states.data, select = c("expense", "csat"))
summary(sts.ex.sat)
# correlation between expense and csat
cor(sts.ex.sat)
## Plot the data before fitting models
## âââââââââââââââââââââââââââââââââââââââ
##   Plot the data to look for multivariate outliers, non-linear
##   relationships etc.
# scatter plot of expense vs csat
plot(sts.ex.sat)
sat.mod <- lm(csat ~ expense, # regression formula
data=states.data) # data set
# Summarize and print the results
summary(sat.mod) # show regression coefficients table
summary(lm(csat ~ expense + percent, data = states.data))
summary ( energymetro1)
energymetro2 <- lm (energy ~ metro + toxic, data = dataset)
summary ( energymetro2)
summary ( energymetro2)
plot (energymetro2)
str (dataset)
states.info <- data.frame(attributes(dataset)[c("names", "var.labels")])
sts.met.ener <- subset(dataset, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (sts.met.ener)
plot(energymetro)
summary ( energymetro2)
plot (energymetro2)
summary ( energymetro1)
plot( energymetro1)
states.rds <- readRDS("dataSets/states.rds")
str (states.rds)
states.info <- data.frame(attributes(states.rds)[c("names", "var.labels")])
sts.met.ener <- subset(states.rds, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (sts.met.ener)
plot(energymetro)
summary ( energymetro2)
plot( energymetro2)
states.rds <- readRDS("dataSets/states.rds")
str (states.rds)
states.info <- data.frame(attributes(states.rds)[c("names", "var.labels")])
sts.met.ener <- subset(states.rds, select = c("metro", "energy"))
summary(sts.met.ener)
str (sts.met.ener)
View(states.data)
View(states.info)
energymetro <- lm (energy ~ metro, data = dataset)
summary (energymetro)
cor (sts.met.ener)
plot(energymetro)
energymetro1 <- lm (energy ~ metro + density + waste + toxic, data = dataset)
summary ( energymetro1)
energymetro2 <- lm (energy ~  metro + toxic, data = dataset)
summary ( energymetro2)
plot( energymetro2)
energymetro2 <- lm (energy ~  metro + toxic, data = dataset)
summary ( energymetro2)
plot( energymetro2)
energymetro1 <- lm (energy ~ metro + density + waste + toxic, data = dataset)
summary ( energymetro1)
plot( energymetro1)
energymetro2 <- lm (energy ~  metro + toxic, data = dataset)
summary ( energymetro2)
plot( energymetro2)
energymetro2 <- lm (energy ~  toxic , data = dataset)
summary ( energymetro2)
plot( energymetro2)
